}
excel_files  <- list.files(path = "D:/2 Bioversity/spia/2024/runs_files_2024/ingridient_dish_meal_records",
full.names = TRUE,
pattern = ("\\.xlsx$"))
# Function to simplify figure creation
figure_box_plot <- function(data, xlabel, ylabel, fill_label, name) {
# Create the plot
hh_data_distribution <- ggplot(data, aes_string(x=xlabel, y=ylabel, fill=fill_label)) +
geom_boxplot(notch = TRUE) +
geom_violin(trim = FALSE, fill = NA) +
stat_summary(fun.y = mean, geom = "point", shape = 23, size = 2) +
xlab(name) +
ylab("") +
theme(legend.position = "none")
# Return the plot
return(hh_data_distribution)
}
robust_test <- coeftest(model, vcov = robust_se)
tidy_results <- tidy(robust_test)
# Function to run the felm model with treatment, covariates, and fixed effects
run_felm_model_EHW_se <- function(data, outcome_var, treatment_var, covariates, fixed_effects) {
# Ensure the response variable and village_cor_col are in the data
if (!all(c(response_var, village_cor_col) %in% colnames(data))) {
stop("Response variable or village correlation column not found in data")
}
# Create the formula dynamically
covariates_str <- paste(covariates, collapse = " + ")
fixed_effects_str <- paste(fixed_effects, collapse = " + ")
formula_str <- paste(outcome_var, "~", treatment_var, "+", covariates_str, "|", fixed_effects_str)
formula <- as.formula(formula_str)
# Debugging: Print or inspect formula_str
print("Generated Formula:")
print(formula_str)
# Print the first few rows of data for debugging
cat("First few rows of data:\n")
print(head(data))
# Fit the felm model
model <- tryCatch({
felm(formula, data = data)
}, error = function(e) {
message("Error fitting the model: ", conditionMessage(e))
return(NULL)
})
if (is.null(model)) {
stop("Model fitting failed.")
}
# Print model summary
print(summary(model))
# Calculate robust standard errors
robust_se <- tryCatch({
vcovHC(model, type = "HC1")
}, error = function(e) {
message("Error calculating robust standard errors: ", conditionMessage(e))
return(NULL)
})
if (!is.null(robust_se)) {
robust_test <- coeftest(model, vcov = robust_se)
tidy_results <- tidy(robust_test)}
}
# Define a custom labeller function to wrap text and use custom labels
wrap_text <- function(labels, width = 10) {
lapply(labels, function(label) {
custom_label <- custom_labels[label]
paste(strwrap(custom_label, width = width), collapse = "\n")
})
}
#winsorize each column ====
winsorize_column <- function(x, probs = c(0.05, 0.95)) {
return(Winsorize(x, probs = probs, na.rm=TRUE))
}
shared_solar<-all_villages_ing_dish_meals_l_fg%>%
mutate(cooking_method_r=if_else(cooking_method=="S-Soar Stove"|cooking_method=="S-Solar stove"|cooking_method=="S-Solar Stove", "Solar_stove",
if_else(cooking_method=="C- Charcol"|cooking_method=="C-Charcaol"|cooking_method=="c-charcoal"|cooking_method=="c-Charcoal"|cooking_method=="C-charcoal"|cooking_method=="C-Charcoal"|cooking_method== "C-Charcol"|cooking_method=="C-Charcooal"|cooking_method=="M-Manure  C-Charcoal", "Charcoal",
if_else(cooking_method=="f- firewood"|cooking_method=="F- firewood"|cooking_method=="F- Firewood"|cooking_method=="F-F-rewood"|cooking_method=="f-firewood"|cooking_method=="F-firewood"|cooking_method=="F-Firewood", "Firewood",
if_else(cooking_method=="E-Electric Stove", "Electric_stove",
if_else(cooking_method=="M-Cow dung"|cooking_method=="M-Manure"|cooking_method=="M-Manure  C-Charcoal", "Cow_dung",
if_else(cooking_method=="Other", "Other",
if_else(cooking_method=="", "Missing", "Missing"))))))))%>%
group_by(cod, week, day, meal,  dish, cooking_method_r)%>%
summarise(n_ing=n())%>%
group_by(cod, cooking_method_r)%>%
summarise(n_dishes=n(), total_ing=sum(n_ing))%>%
mutate(avg_ing_meal_cook_method=total_ing/n_dishes,
cooking_method_r_r=if_else(is.na(cooking_method_r), "Missing", cooking_method_r))%>%
left_join(main_hh_covariates, by="cod")%>%
filter(!is.na(solar_stove))%>%
dplyr::select(cod, village_cor, gender, age_cal, highest_grade, solar_stove, hh_no, aas_involvement, tlu, phy_assets, cooking_method_r_r, n_dishes)%>%
pivot_wider(names_from = cooking_method_r_r,
values_from = n_dishes,
values_fn = sum,
values_fill = 0)%>%
mutate(per_solar_dish=Solar_stove*100/(Charcoal+Firewood+Missing+Electric_stove+Solar_stove+Cow_dung+Other))%>%
select(-c("Charcoal","Firewood","Missing","Electric_stove","Solar_stove","Cow_dung","Other"   ))%>%
mutate(across(c(per_solar_dish), winsorize_column)) #winsorize variables
rlang::last_trace()
#libraries====
rm(list=ls())#clean
library(here)
library(readxl)
library(purrr)
library(dplyr)
library(stringr)
library(janitor)
library(tidyr)
library(fuzzyjoin)
library(stringi)
library(fastDummies)
library(broom)
library(car)
library(ggplot2)
library(gridExtra)
library(lmtest)
library(sandwich)
library(lfe)
library(rlang)
library(stargazer)
library(DescTools)#winsorize
library(kableExtra) #latex
library(flextable)
library(officer)
#call functions needed
source("Functions.R")
#read file
all_villages_ing_dish_meals_l_fg<-read.csv(here("anonymized_source_files","all_villages_ing_dish_meals_l_fg.csv"))%>%
mutate(hdds=if_else(hdds==""|hdds=="na", NA, hdds),
#hdds= 1.cereals, 2.eggs,	3.fish and other seafood,	4.fruits, 5.hdds	legumes, nuts and seeds, 6.	meat, 7.milk and milk products, 8.oils and fats	spices, 9.condiments and beverages, 10.sweets, 11.vegetables, 12.white tubers and roots
#Functions for data cleaning/reading and anonymizing ingredient data====
#Reading and cleaning all week, day, meal, ingredient data ####
read_and_clean_sheet <- function(file, sheet_name) {
data <- read_excel(file, sheet = sheet_name)
data <- mutate_all(data, as.character) # Convert all columns to character
colnames(data) <- make.names(colnames(data), unique = TRUE) # Ensure unique column names
return(data)
}
excel_files  <- list.files(path = "D:/2 Bioversity/spia/2024/runs_files_2024/ingridient_dish_meal_records",
all_villages_ing_dish_meals_l_fg<-read.csv(here("anonymized_source_files","all_villages_ing_dish_meals_l_fg.csv"))%>%
mutate(hdds=if_else(hdds==""|hdds=="na", NA, hdds),
#hdds= 1.cereals, 2.eggs,	3.fish and other seafood,	4.fruits, 5.hdds	legumes, nuts and seeds, 6.	meat, 7.milk and milk products, 8.oils and fats	spices, 9.condiments and beverages, 10.sweets, 11.vegetables, 12.white tubers and roots
#libraries====
rm(list=ls())#clean
library(here)
library(here)
library(readxl)
library(purrr)
library(dplyr)
library(stringr)
library(janitor)
library(tidyr)
library(fuzzyjoin)
library(stringi)
library(fastDummies)
library(broom)
library(car)
library(ggplot2)
library(gridExtra)
library(lmtest)
library(sandwich)
library(lfe)
library(rlang)
library(stargazer)
library(DescTools)#winsorize
library(kableExtra) #latex
library(flextable)
library(officer)
all_villages_ing_dish_meals_l_fg<-read.csv(here("anonymized_source_files","all_villages_ing_dish_meals_l_fg.csv"))%>%
mutate(hdds=if_else(hdds==""|hdds=="na", NA, hdds),
#hdds= 1.cereals, 2.eggs,	3.fish and other seafood,	4.fruits, 5.hdds	legumes, nuts and seeds, 6.	meat, 7.milk and milk products, 8.oils and fats	spices, 9.condiments and beverages, 10.sweets, 11.vegetables, 12.white tubers and roots
all_villages_ing_dish_meals_l_fg<-read.csv(here("anonymized_source_files","all_villages_ing_dish_meals_l_fg.csv"))%>%
mutate(hdds=if_else(hdds==""|hdds=="na", NA, hdds),
#hdds= 1.cereals, 2.eggs,	3.fish and other seafood,	4.fruits, 5.hdds	legumes, nuts and seeds, 6.	meat, 7.milk and milk products, 8.oils and fats	spices, 9.condiments and beverages, 10.sweets, 11.vegetables, 12.white tubers and roots
wdds=if_else(wdds==""|wdds=="na", NA, wdds),
#wdds= 1.dark green leafy vegetables, 2.eggs, 3.legumes, nuts and seeds, 4.meat, insects and fish, 5.milk and milk products, 6.organ meat, 7.other fruits and vegetables, 8.other vitamin a rich fruits and vegetables, 9.starchy staples
zfbdrfg=if_else(zfbdrfg==""|zfbdrfg=="na", NA, zfbdrfg))
#zfbdrfg= 1.Cereals, starchy roots and tubers, 2. vegetables, 3. frits, 4. fish, insects, and animal source foods, 5. dairy, 6. legumes, pulses and nuts
main_hh_covariates<-read.csv(here("anonymized_source_files", "main_hh_covariates.csv"))
library(readr)
all_villages_ing_dish_meals_l_fg <- read_csv("anonymized_source_files/all_villages_ing_dish_meals_l_fg.csv")
View(all_villages_ing_dish_meals_l_fg)
all_villages_ing_dish_meals_l_fg<-read.csv(here("anonymized_source_files","all_villages_ing_dish_meals_l_fg.csv"))%>%
mutate(hdds=if_else(hdds==""|hdds=="na", NA, hdds),
#hdds= 1.cereals, 2.eggs,	3.fish and other seafood,	4.fruits, 5.hdds	legumes, nuts and seeds, 6.	meat, 7.milk and milk products, 8.oils and fats	spices, 9.condiments and beverages, 10.sweets, 11.vegetables, 12.white tubers and roots
wdds=if_else(wdds==""|wdds=="na", NA, wdds),
#wdds= 1.dark green leafy vegetables, 2.eggs, 3.legumes, nuts and seeds, 4.meat, insects and fish, 5.milk and milk products, 6.organ meat, 7.other fruits and vegetables, 8.other vitamin a rich fruits and vegetables, 9.starchy staples
zfbdrfg=if_else(zfbdrfg==""|zfbdrfg=="na", NA, zfbdrfg))
all_villages_ing_dish_meals_l_fg<-read.csv(here("anonymized_source_files","all_villages_ing_dish_meals_l_fg.csv"))%>%
mutate(hdds=if_else(hdds==""|hdds=="na", NA, hdds),
#hdds= 1.cereals, 2.eggs,	3.fish and other seafood,	4.fruits, 5.hdds	legumes, nuts and seeds, 6.	meat, 7.milk and milk products, 8.oils and fats	spices, 9.condiments and beverages, 10.sweets, 11.vegetables, 12.white tubers and roots
wdds=if_else(wdds==""|wdds=="na", NA, wdds))
main_hh_covariates<-read.csv(here("anonymized_source_files", "main_hh_covariates.csv"))
# legumes frequency ====
#getting the total days with recorded information to calculate means
record_days<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week)%>%
summarise(day_T=max(day))%>%
group_by(cod)%>%
summarise(total_days= sum(day_T), total_weeks=n())
View(record_days)
legumes<-all_villages_ing_dish_meals_l_fg%>%
filter(Food.group=="Pulses (beans, peas and lentils)")%>%
left_join(record_days, by="cod")
p_dish<-legumes%>%
group_by(cod, week, day, meal, dish)%>% #two dishes in the same meal can have legumes and have been cooked with different methods.
dplyr::summarise(pulses_dish=n() )%>%
group_by(cod)%>%
dplyr::summarise(pulses_dish_sum=sum(pulses_dish))%>%
left_join(record_days, by="cod")%>%
mutate(pulses_dish_avg=pulses_dish_sum/total_days)%>%
select(cod, pulses_dish_avg )
p_meal<-legumes%>%
group_by(cod, week, day, meal)%>%
dplyr::summarise(pulses_meal=n())%>%
group_by(cod, meal)%>%
dplyr::summarise(pulses_meal_sum=sum(pulses_meal))%>%
left_join(record_days, by="cod")%>%
mutate(pulses_meal_avg=pulses_meal_sum/total_days)%>%
dplyr::select(-c(pulses_meal_sum, total_days, total_weeks))%>%
pivot_wider(names_from = meal,
names_prefix="pul_",
values_from = c(pulses_meal_avg))%>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))
p_day<-legumes%>%
group_by(cod, week, day)%>%
dplyr::summarise(pulses_day=n())%>%
group_by(cod)%>%
dplyr::summarise(pulses_day_sum=sum(pulses_day))%>%
left_join(record_days, by="cod")%>%
mutate(pulses_day_avg=pulses_day_sum/total_days)%>%
select(cod, pulses_day_avg ) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))
p_week_avg<-legumes%>%
group_by(cod, week)%>%
dplyr::summarise(pulses_week=n())%>%
group_by(cod)%>%
dplyr::summarise(pulses_week_sum=sum(pulses_week))%>%
left_join(record_days, by="cod")%>%
mutate(pulses_week_avg=pulses_week_sum/total_weeks)%>%
select(cod, pulses_week_avg ) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))
p_week_tot<-legumes%>%
group_by(cod)%>%
dplyr::summarise(pulses_week=n())%>%
left_join(record_days, by="cod")%>%
mutate(pulses_week_tot=pulses_week/total_days)%>%
select(cod, pulses_week_tot ) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))
pulses<-cbind(p_dish, p_meal[,-1], p_day[,-1], p_week_avg[,-1], p_week_tot[,-1])
View(p_day)
View(p_dish)
View(p_meal)
View(pulses)
dds_dish<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week, day, meal,  dish)%>%
dplyr::summarise(hdds_dish=n_distinct(hdds, na.rm=TRUE), wdds_dish=n_distinct(wdds, na.rm=TRUE), zfbdrfg_dish=n_distinct(zfbdrfg, na.rm = TRUE),sr_dish=n_distinct(scientific_name, na.rm=TRUE) )%>%
group_by(cod)%>%
dplyr::summarise(hdds_dish_avg=mean(hdds_dish), wdds_dish_avg=mean(wdds_dish), , zfbdrfg_dish_avg=mean(zfbdrfg_dish), sr_dish_avg=mean(sr_dish))
dds_dish<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week, day, meal,  dish)%>%
dplyr::summarise(hdds_dish=n_distinct(hdds, na.rm=TRUE), wdds_dish=n_distinct(wdds, na.rm=TRUE),sr_dish=n_distinct(scientific_name, na.rm=TRUE) )%>%
group_by(cod)%>%
dplyr::summarise(hdds_dish_avg=mean(hdds_dish), wdds_dish_avg=mean(wdds_dish), sr_dish_avg=mean(sr_dish))
View(dds_dish)
View(all_villages_ing_dish_meals_l_fg)
dds_meal<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week, day, meal)%>%
dplyr::summarise(hdds_meal=n_distinct(hdds, na.rm=TRUE), wdds_meal=n_distinct(wdds, na.rm=TRUE),  spp_meal=n_distinct(scientific_name, na.rm=TRUE))%>%
group_by(cod, meal)%>%
dplyr::summarise(hdds_meal_avg=mean(hdds_meal), wdds_meal_avg=mean(wdds_meal), sr_meal_avg=mean(spp_meal))%>%
pivot_wider(names_from = meal,
values_from = c(hdds_meal_avg, wdds_meal_avg, sr_meal_avg))
dds_day<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week, day)%>%
dplyr::summarise(hdds_day=n_distinct(hdds, na.rm=TRUE), wdds_day=n_distinct(wdds, na.rm=TRUE), sr_day=n_distinct(scientific_name, na.rm=TRUE))%>%
group_by(cod)%>%
dplyr::summarise(hdds_day_avg=mean(hdds_day), wdds_day_avg=mean(wdds_day), sr_day_avg=mean(sr_day))
dds_week_avg<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week)%>%
dplyr::summarise(hdds_week=n_distinct(hdds, na.rm=TRUE), wdds_week=n_distinct(wdds, na.rm=TRUE), sr_week=n_distinct(scientific_name, na.rm=TRUE))%>%
group_by(cod)%>%
dplyr::summarise(hdds_week_avg=mean(hdds_week), wdds_week_avg=mean(wdds_week),sr_week_avg=mean(sr_week) )
dds_week_tot<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod)%>%
dplyr::summarise(hdds_week_tot=n_distinct(hdds, na.rm=TRUE), wdds_week_tot=n_distinct(wdds, na.rm=TRUE), sr_week_tot=n_distinct(scientific_name))
View(dds_day)
View(dds_dish)
View(dds_meal)
View(dds_week_avg)
View(dds_week_tot)
View(dds_dish)
library(here)
library(readxl)
library(purrr)
library(dplyr)
library(stringr)
library(janitor)
library(tidyr)
library(fuzzyjoin)
library(stringi)
library(fastDummies)
library(broom)
library(car)
library(ggplot2)
library(gridExtra)
library(lmtest)
library(sandwich)
library(lfe)
library(rlang)
library(stargazer)
# legumes frequency ====
#getting the total days with recorded information to calculate means
record_days<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week)%>%
summarise(day_T=max(day))%>%
group_by(cod)%>%
summarise(total_days= sum(day_T), total_weeks=n())
View(record_days)
legumes<-all_villages_ing_dish_meals_l_fg%>%
filter(Food.group=="Pulses (beans, peas and lentils)")%>%
left_join(record_days, by="cod")
View(legumes)
p_dish<-legumes%>%
group_by(cod, week, day, meal, dish)%>% #two dishes in the same meal can have legumes and have been cooked with different methods.
dplyr::summarise(pulses_dish=n() )%>%
group_by(cod)%>%
dplyr::summarise(pulses_dish_sum=sum(pulses_dish))%>%
left_join(record_days, by="cod")%>%
mutate(pulses_dish_avg=pulses_dish_sum/total_days)%>%
select(cod, pulses_dish_avg )
View(p_day)
View(p_dish)
View(p_meal)
View(all_villages_ing_dish_meals_l_fg)
View(record_days)
rm(list=ls())#clean
library(here)
library(readxl)
library(purrr)
library(dplyr)
library(stringr)
library(janitor)
library(tidyr)
library(fuzzyjoin)
library(stringi)
library(fastDummies)
library(broom)
library(car)
library(ggplot2)
library(gridExtra)
library(lmtest)
library(sandwich)
library(lfe)
library(rlang)
library(stargazer)
library(DescTools)#winsorize
library(kableExtra) #latex
#call functions needed
source("Functions.R")
#read file
all_villages_ing_dish_meals_l_fg<-read.csv( here("anonymized_source_files","all_villages_ing_dish_meals_l_fg.csv"))
main_hh_covariates<-read.csv(here("anonymized_source_files", "main_hh_covariates.csv"))
boiled_liquids_cov<-read.csv(here("anonymized_source_files","all_villages_boiled_liquids_cov.csv"))
#Dishes Cooked ====
#Calculate the number of average number of dishes cooked in each meal during the whole period
dish_meal<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week, day, meal)%>%
dplyr::summarise(no_dishes=as.numeric(max(dish)))%>%
group_by(cod, meal)%>%
dplyr::summarise(avg_no_dishes=mean(no_dishes))%>%
pivot_wider(names_from = meal,
names_prefix ="dish_",
values_from = avg_no_dishes   ,
values_fill = 0)
dish_tot<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week, day, meal, dish)%>%
dplyr::summarise(no_dishes=n())%>%
group_by(cod )%>%
dplyr::summarise(dish_day=mean(no_dishes))
# dates_r<-all_villages_ing_dish_meals_l_fg%>%
#   group_by(cod)%>%
#   dplyr::summarise(week_r=max(week), day_r=max(day))%>%
#   mutate(days_r=week_r*day_r)
skip_meal<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week,  day, meal)%>%
summarise(dish_meal=max(dish))%>%
group_by(cod, meal)%>%
summarise(no_meal=n())%>%
left_join(dates_r, by="cod")%>%
mutate(skipped_meal=days_r-no_meal)%>%
dplyr::select(cod, meal, skipped_meal)%>%
pivot_wider(names_from = meal,
names_prefix ="skipped_",
values_from = skipped_meal,
values_fill = 0)%>%
mutate(skip_tot=(skipped_breakfast+skipped_dinner+skipped_lunch))
dates_r<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod)%>%
dplyr::summarise(week_r=max(week), day_r=max(day))%>%
mutate(days_r=week_r*day_r)
skip_meal<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week,  day, meal)%>%
summarise(dish_meal=max(dish))%>%
group_by(cod, meal)%>%
summarise(no_meal=n())%>%
left_join(dates_r, by="cod")%>%
mutate(skipped_meal=days_r-no_meal)%>%
dplyr::select(cod, meal, skipped_meal)%>%
pivot_wider(names_from = meal,
names_prefix ="skipped_",
values_from = skipped_meal,
values_fill = 0)%>%
mutate(skip_tot=(skipped_breakfast+skipped_dinner+skipped_lunch))
dish_meals<-dish_meal%>%
left_join(dish_tot, by="cod" )%>%
left_join(skip_meal, by="cod")%>%
mutate(across(c(dish_breakfast,dish_dinner,dish_lunch,dish_day,skipped_breakfast,skipped_dinner,skipped_lunch,skip_tot), winsorize_column))
#libraries====
rm(list=ls())#clean
library(here)
library(readxl)
library(purrr)
library(dplyr)
library(stringr)
library(janitor)
library(tidyr)
library(fuzzyjoin)
library(stringi)
library(fastDummies)
library(broom)
library(car)
library(ggplot2)
library(gridExtra)
library(lmtest)
library(sandwich)
library(lfe)
library(rlang)
library(stargazer)
library(DescTools)#winsorize
library(kableExtra) #latex
library(flextable)
library(officer)
#call functions needed
source("Functions.R")
#read file
all_villages_ing_dish_meals_l_fg<-read.csv(here("anonymized_source_files","all_villages_ing_dish_meals_l_fg.csv"))%>%
mutate(hdds=if_else(hdds==""|hdds=="na", NA, hdds),
#hdds= 1.cereals, 2.eggs,	3.fish and other seafood,	4.fruits, 5.hdds	legumes, nuts and seeds, 6.	meat, 7.milk and milk products, 8.oils and fats	spices, 9.condiments and beverages, 10.sweets, 11.vegetables, 12.white tubers and roots
wdds=if_else(wdds==""|wdds=="na", NA, wdds),
#wdds= 1.dark green leafy vegetables, 2.eggs, 3.legumes, nuts and seeds, 4.meat, insects and fish, 5.milk and milk products, 6.organ meat, 7.other fruits and vegetables, 8.other vitamin a rich fruits and vegetables, 9.starchy staples
zfbdrfg=if_else(zfbdrfg==""|zfbdrfg=="na", NA, zfbdrfg))
#read file
all_villages_ing_dish_meals_l_fg<-read.csv(here("anonymized_source_files","all_villages_ing_dish_meals_l_fg.csv"))%>%
mutate(hdds=if_else(hdds==""|hdds=="na", NA, hdds),
#hdds= 1.cereals, 2.eggs,	3.fish and other seafood,	4.fruits, 5.hdds	legumes, nuts and seeds, 6.	meat, 7.milk and milk products, 8.oils and fats	spices, 9.condiments and beverages, 10.sweets, 11.vegetables, 12.white tubers and roots
wdds=if_else(wdds==""|wdds=="na", NA, wdds))
#wdds= 1.dark green leafy vegetables, 2.eggs, 3.legumes, nuts and seeds, 4.meat, insects and fish, 5.milk and milk products, 6.organ meat, 7.other fruits and vegetables, 8.other vitamin a rich fruits and vegetables, 9.starchy staples
#  zfbdrfg=if_else(zfbdrfg==""|zfbdrfg=="na", NA, zfbdrfg))
#zfbdrfg= 1.Cereals, starchy roots and tubers, 2. vegetables, 3. frits, 4. fish, insects, and animal source foods, 5. dairy, 6. legumes, pulses and nuts
main_hh_covariates<-read.csv(here("anonymized_source_files", "main_hh_covariates.csv"))
record_days<-all_villages_ing_dish_meals_l_fg%>%
group_by(cod, week)%>%
summarise(day_T=max(day))%>%
group_by(cod)%>%
summarise(total_days= sum(day_T), total_weeks=n())
legumes<-all_villages_ing_dish_meals_l_fg%>%
filter(Food.group=="Pulses (beans, peas and lentils)")%>%
left_join(record_days, by="cod")
p_dish<-legumes%>%
group_by(cod, week, day, meal, dish)%>% #two dishes in the same meal can have legumes and have been cooked with different methods.
dplyr::summarise(pulses_dish=n() )%>%
group_by(cod)%>%
dplyr::summarise(pulses_dish_sum=sum(pulses_dish))%>%
left_join(record_days, by="cod")%>%
mutate(pulses_dish_avg=pulses_dish_sum/total_days)%>%
select(cod, pulses_dish_avg )
p_meal<-legumes%>%
group_by(cod, week, day, meal)%>%
dplyr::summarise(pulses_meal=n())%>%
group_by(cod, meal)%>%
dplyr::summarise(pulses_meal_sum=sum(pulses_meal))%>%
left_join(record_days, by="cod")%>%
mutate(pulses_meal_avg=pulses_meal_sum/total_days)%>%
dplyr::select(-c(pulses_meal_sum, total_days, total_weeks))%>%
pivot_wider(names_from = meal,
names_prefix="pul_",
values_from = c(pulses_meal_avg))%>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))
p_day<-legumes%>%
group_by(cod, week, day)%>%
dplyr::summarise(pulses_day=n())%>%
group_by(cod)%>%
dplyr::summarise(pulses_day_sum=sum(pulses_day))%>%
left_join(record_days, by="cod")%>%
mutate(pulses_day_avg=pulses_day_sum/total_days)%>%
select(cod, pulses_day_avg ) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))
p_week_avg<-legumes%>%
group_by(cod, week)%>%
dplyr::summarise(pulses_week=n())%>%
group_by(cod)%>%
dplyr::summarise(pulses_week_sum=sum(pulses_week))%>%
left_join(record_days, by="cod")%>%
mutate(pulses_week_avg=pulses_week_sum/total_weeks)%>%
select(cod, pulses_week_avg ) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))
p_week_tot<-legumes%>%
group_by(cod)%>%
dplyr::summarise(pulses_week=n())%>%
left_join(record_days, by="cod")%>%
mutate(pulses_week_tot=pulses_week/total_days)%>%
select(cod, pulses_week_tot ) %>%
mutate(across(everything(), ~ ifelse(is.na(.), 0, .)))
pulses<-cbind(p_dish, p_meal[,-1], p_day[,-1], p_week_avg[,-1], p_week_tot[,-1])
View(legumes)
